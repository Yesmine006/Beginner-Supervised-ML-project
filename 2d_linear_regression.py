# -*- coding: utf-8 -*-
"""2D Linear regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19ygXrP5CsApJZomq-_BpKrsxCGcVowdH

## Dataset
"""

import pandas as pd
data_file='/content/student_scores - student_scores.csv'
df=pd.read_csv(data_file)

df.head()

"""### Splitting"""

import matplotlib.pyplot as plt
x=df.Hours
y=df.Scores

# Plotting the distribution of scores
plt.plot(x,y,'o')
plt.title('Hours vs scores')
plt.xlabel('Hours')
plt.ylabel('Scores')

"""We can clearly see a positive linear relationship between the numbre of hours and the scores.

### Data preperation

Now we will be dividing our dataset into features and target
"""

X = df.iloc[:, :-1].values  #X must be an array-like, sparse matrix} of shape (n_samples, n_features)
y = df.iloc[:, 1].values  #y must be an array-like of shape (n_samples,) or (n_samples, n_targets)

"""Now we will split our data into train dataset and validation dataset"""

from sklearn.model_selection import train_test_split
train_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.2, random_state = 0)

"""### Model """

from sklearn.linear_model import LinearRegression  
model=LinearRegression()
model.fit(train_X,train_y)

# Plotting the regression line
line = model.coef_*X+model.intercept_ # the line is like y=x.a+b   a is is  coef_    intercept_ is  b

# Plotting for the test data
plt.scatter(X, y) # A scatter plot of y vs. x with varying marker size and/or color.
plt.plot(X, line); 
plt.show()

"""### Predictions"""

predictions = model.predict(val_X)

predictions

val_y

# Comparing Actual vs Predicted
comp = pd.DataFrame({'Actual': val_y, 'Predicted': predictions})  
comp

"""Let's predict the score of a student who strudy 9.25 Hours per day"""

hours=9.25
score=model.coef_*hours+model.intercept_ #or: own_pred = regressor.predict(hours)
score[0]

"""### Evaluation

We will calculate the Mean Absolute Error in Validation Data
"""

from sklearn.metrics import mean_absolute_error
val_mae = mean_absolute_error(val_y, predictions)
print('Mean Absolute Error:',val_mae)

